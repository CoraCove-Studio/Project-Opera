//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""CoreGameplay"",
            ""id"": ""760e29e2-1f42-4362-9111-9c6e24a0b53c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""79577e9a-f490-496e-969d-d00fa33cf843"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""19b827b8-5c9c-4424-ae81-6f070a4a88f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleMenu"",
                    ""type"": ""Button"",
                    ""id"": ""4d850d34-edb8-4e30-9ba6-da5191e2a9ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""b344948f-b5a0-4aa7-adbe-f04cf46f18f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""adbcc220-5be0-48e8-99ad-00e1991a5b05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9a7a2541-efa2-44e7-ad82-0e9b7bc0ee01"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9a6c6497-2ee5-467b-bd59-78d5cfe1f6bd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""32555f5b-2840-45c7-9164-2b1c1885be97"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5e85f3b9-ce62-422a-afe4-6c0722e24fb3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""308f52ab-48db-4bac-858c-82dc7481221d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3009a176-67e7-4c84-9be8-32c7bd7c149f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13d2658e-0ca4-41b6-b526-7eb4c5a04c17"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9895a94e-7bea-434e-9251-3e282110f35c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""ToggleMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4376aa01-a26a-4667-9b0b-4174097d0005"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8c3743e-0054-48db-8f7c-b6f139e6ffba"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuNav"",
            ""id"": ""0f165a11-7590-4937-a862-339e23200fa5"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""8eb97ccc-c8f9-498a-a063-4223a7d2e6f4"",
                    ""expectedControlType"": ""Dpad"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5619ace8-1b89-4b40-8a37-7946a676c425"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        }
    ]
}");
        // CoreGameplay
        m_CoreGameplay = asset.FindActionMap("CoreGameplay", throwIfNotFound: true);
        m_CoreGameplay_Movement = m_CoreGameplay.FindAction("Movement", throwIfNotFound: true);
        m_CoreGameplay_Look = m_CoreGameplay.FindAction("Look", throwIfNotFound: true);
        m_CoreGameplay_ToggleMenu = m_CoreGameplay.FindAction("ToggleMenu", throwIfNotFound: true);
        m_CoreGameplay_Interact = m_CoreGameplay.FindAction("Interact", throwIfNotFound: true);
        m_CoreGameplay_Pickup = m_CoreGameplay.FindAction("Pickup", throwIfNotFound: true);
        // MenuNav
        m_MenuNav = asset.FindActionMap("MenuNav", throwIfNotFound: true);
        m_MenuNav_Newaction = m_MenuNav.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CoreGameplay
    private readonly InputActionMap m_CoreGameplay;
    private List<ICoreGameplayActions> m_CoreGameplayActionsCallbackInterfaces = new List<ICoreGameplayActions>();
    private readonly InputAction m_CoreGameplay_Movement;
    private readonly InputAction m_CoreGameplay_Look;
    private readonly InputAction m_CoreGameplay_ToggleMenu;
    private readonly InputAction m_CoreGameplay_Interact;
    private readonly InputAction m_CoreGameplay_Pickup;
    public struct CoreGameplayActions
    {
        private @Controls m_Wrapper;
        public CoreGameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CoreGameplay_Movement;
        public InputAction @Look => m_Wrapper.m_CoreGameplay_Look;
        public InputAction @ToggleMenu => m_Wrapper.m_CoreGameplay_ToggleMenu;
        public InputAction @Interact => m_Wrapper.m_CoreGameplay_Interact;
        public InputAction @Pickup => m_Wrapper.m_CoreGameplay_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_CoreGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CoreGameplayActions set) { return set.Get(); }
        public void AddCallbacks(ICoreGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_CoreGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CoreGameplayActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @ToggleMenu.started += instance.OnToggleMenu;
            @ToggleMenu.performed += instance.OnToggleMenu;
            @ToggleMenu.canceled += instance.OnToggleMenu;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
        }

        private void UnregisterCallbacks(ICoreGameplayActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @ToggleMenu.started -= instance.OnToggleMenu;
            @ToggleMenu.performed -= instance.OnToggleMenu;
            @ToggleMenu.canceled -= instance.OnToggleMenu;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
        }

        public void RemoveCallbacks(ICoreGameplayActions instance)
        {
            if (m_Wrapper.m_CoreGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICoreGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_CoreGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CoreGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CoreGameplayActions @CoreGameplay => new CoreGameplayActions(this);

    // MenuNav
    private readonly InputActionMap m_MenuNav;
    private List<IMenuNavActions> m_MenuNavActionsCallbackInterfaces = new List<IMenuNavActions>();
    private readonly InputAction m_MenuNav_Newaction;
    public struct MenuNavActions
    {
        private @Controls m_Wrapper;
        public MenuNavActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_MenuNav_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_MenuNav; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuNavActions set) { return set.Get(); }
        public void AddCallbacks(IMenuNavActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuNavActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuNavActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IMenuNavActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IMenuNavActions instance)
        {
            if (m_Wrapper.m_MenuNavActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuNavActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuNavActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuNavActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuNavActions @MenuNav => new MenuNavActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICoreGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnToggleMenu(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
    public interface IMenuNavActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
